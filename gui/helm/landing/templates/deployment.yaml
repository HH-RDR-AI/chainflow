---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.appName }}
    {{- if .Values.chainName }}
    chain: {{ .Values.chainName }}
    {{- end }}
  name: {{ .Values.appName }}
  namespace: {{ .Release.Namespace }}
spec:
  progressDeadlineSeconds: 600
  {{- if .Values.chainName }}
  replicas: {{ (index .Values .Values.appName "replicas" .Values.chainName) | default (index .Values .Values.appName "replicas").default }}
  {{- else }}
  replicas: {{ (index .Values .Values.appName "replicas").default }}
  {{- end }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Values.appName }}
      {{- if .Values.chainName }}
      chainName: {{ .Values.chainName }}
      {{- end }}
  strategy:
    type: {{ index .Values .Values.appName "strategyType" }}
    {{- if eq (index .Values .Values.appName "strategyType") "RollingUpdate" }}
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
    {{- end }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}
        {{- if .Values.chainName }}
        chainName: {{ .Values.chainName }}
        {{- end }}
    spec:
      containers:
        - name: {{ .Values.appName }}
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          args:
           {{- range $value := (index .Values .Values.appName "args") }}
            - {{ $value | quote }}
           {{- end }}
        {{- if index .Values .Values.appName "workDir" }}
          workingDir: {{ index .Values .Values.appName "workDir" | quote }}
        {{- end }}
        {{- if index .Values .Values.appName "env" }}
          env:
          {{- range $key, $value := (index .Values .Values.appName "env") }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          {{- if .Values.chainName }}
            - name: NETWORK
              value: '{{ (split "-" .Values.chainName)._0 }}'
            - name: CHAIN_ID
              value: '{{ (split "-" .Values.chainName)._1 }}'
          {{- end }}
        {{- end }}
          imagePullPolicy: IfNotPresent
        {{- if index .Values .Values.appName "command" }}
          command: {{ index .Values .Values.appName "command" }}
        {{- end }}
        {{- if index .Values .Values.appName "port" }}
          ports:
            - containerPort: {{ index .Values .Values.appName "port" }}
              name: lbport
              protocol: TCP
        {{- end }}
          resources:
            limits:
              cpu: {{ index .Values .Values.appName "limitsCpu" }}
              memory: {{ index .Values .Values.appName "limitsMemory" }}
            requests:
              cpu: {{ index .Values .Values.appName "requestsCpu" }}
              memory: {{ index .Values .Values.appName "requestsMemory" }}
        {{- if (index .Values .Values.appName "readnessProbe") }}
          readinessProbe:
            failureThreshold: 3
            {{- if (index .Values .Values.appName "readnessProbe" "exec") }}
            exec:
              command: {{ index .Values .Values.appName "readnessProbe" "exec" }}
            {{- else }}
            httpGet:
              path: {{ index .Values .Values.appName "readnessProbe" "path" }}
              port: {{ index .Values .Values.appName "readnessProbe" "port" }}
              scheme: HTTP
            {{- end }}
            initialDelaySeconds: {{ index .Values .Values.appName "readnessProbe" "initialDelaySeconds" | default "15" }}
            periodSeconds: {{ index .Values .Values.appName "readnessProbe" "periodSeconds" | default "60" }}
            successThreshold: 1
            timeoutSeconds: {{ index .Values .Values.appName "readnessProbe" "timeoutSeconds" | default "20" }}
        {{- end }}
        {{- if (index .Values .Values.appName "livenessProbe") }}
          livenessProbe:
            failureThreshold: 3
            {{- if (index .Values .Values.appName "livenessProbe" "exec") }}
            exec:
              command: {{ index .Values .Values.appName "livenessProbe" "exec" }}
            {{- else }}
            httpGet:
              path: {{ index .Values .Values.appName "livenessProbe" "path" }}
              port: {{ index .Values .Values.appName "livenessProbe" "port" }}
              scheme: HTTP
            {{- end }}
            initialDelaySeconds: {{ index .Values .Values.appName "livenessProbe" "initialDelaySeconds" | default "60" }}
            periodSeconds: {{ index .Values .Values.appName "livenessProbe" "periodSeconds" | default "60" }}
            successThreshold: 1
            timeoutSeconds: {{ index .Values .Values.appName "livenessProbe" "timeoutSeconds" | default "20" }}
        {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: { }
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: {{ .Values.registrySecretName }}
      restartPolicy: Always
      securityContext: { }
      terminationGracePeriodSeconds: 30

{{ if index .Values .Values.appName "port" }}
---
kind: Service
apiVersion: v1
metadata:
  name: {{ .Values.appName }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.appName }}
spec:
  ports:
    - name: default
      protocol: TCP
      port: {{ index .Values .Values.appName "port" }}
      targetPort: {{ index .Values .Values.appName "port" }}
      {{- if (index .Values .Values.appName "nodePort") }}
      nodePort: {{ index .Values .Values.appName "nodePort" }}
      {{- end }}
  selector:
    app: {{ .Values.appName }}
  type: {{ index .Values .Values.appName "serviceType" | default "ClusterIP" }}
{{ end }}

{{if index .Values .Values.appName "ingressHost1" }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.appName }}
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.org/lb-method: "round_robin"
{{- if index .Values .Values.appName "letsencrypt" "issuer" }}
    cert-manager.io/cluster-issuer: {{ index .Values .Values.appName "letsencrypt" "issuer" }}
{{- end }}
spec:
{{- if index .Values .Values.appName "letsencrypt" "issuer" }}
  tls:
    - hosts:
        - {{ index .Values .Values.appName "ingressHost1" }}
      secretName: {{ index .Values .Values.appName "ingressHost1" }}-tls
{{- end }}
  rules:
    - host: {{ index .Values .Values.appName "ingressHost1" }}
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Values.appName }}
                port:
                  number: {{ index .Values .Values.appName "port" }}
          - path: /dashboard
              pathType: ImplementationSpecific
              backend:
                service:
                  name: chainflow-dashboard
                  port:
                    number: 3000
{{ end }}

{{if index .Values .Values.appName "ingressHost2" }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.appName }}-cluster
  namespace: {{ .Release.Namespace }}
  annotations:
    nginx.org/lb-method: "round_robin"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
{{- if index .Values .Values.appName "letsencrypt" "issuer" }}
    cert-manager.io/cluster-issuer: {{ index .Values .Values.appName "letsencrypt" "issuer" }}
{{- end }}
spec:
{{- if index .Values .Values.appName "letsencrypt" "issuer" }}
  tls:
    - hosts:
        - {{ index .Values .Values.appName "ingressHost2" }}
      secretName: {{ index .Values .Values.appName "ingressHost2" }}-tls
{{- end }}
  rules:
    - host: {{ index .Values .Values.appName "ingressHost2" }}
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Values.appName }}
                port:
                  number: {{ index .Values .Values.appName "port" }}
{{ end }}

{{if index .Values .Values.appName "maxReplicas" }}
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Values.appName }}
  namespace: {{ .Release.Namespace }}
spec:
  maxReplicas: {{ index .Values .Values.appName "maxReplicas" }}
  minReplicas: {{ index .Values .Values.appName "minReplicas" }}
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Values.appName }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 85
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 30
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
{{ end }}
